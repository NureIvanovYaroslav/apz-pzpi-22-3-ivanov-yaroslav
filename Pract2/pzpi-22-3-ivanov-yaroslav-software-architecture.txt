Харківський національний університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії




ЗВІТ
з практичного заняття №2
з дисципліни  «Архітектура програмного забезпечення»
на тему: «Архітектура відомих програмних систем»




Виконав
ст. гр. ПЗПІ-22-3
Іванов Ярослав В’ячеславович

Перевірив
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович







Харків 2025

ІСТОРІЯ ЗМІН

№	Дата	Версія звіту	Опис змін та виправлень
1	04.05.2025	0.1	Зроблено структуру звіту
2	05.05.2025	0.1	Описано розділ «Завдання»
3	05.05.2025	0.1	Описано розділ «Опис виконаної роботи»
4	05.05.2025	0.1	Наведено слайди презентації. Заповнено додаток Б.
5	05.05.2025	0.1	Наведено посилання на відеозапис доповіді. Заповнено додаток А.

1 ЗАВДАННЯ

     Ознайомитися з архітектурою програмної системи Reddit, її ключовими технічними компонентами, принципами роботи, використовуваним технологічним стеком, підходами до масштабування, забезпечення стабільності, а також проаналізувати виклики та перспективи розвитку платформи.

2 ОПИС ВИКОНАНОЇ РОБОТИ

     Доповідь була оформлена та презентована у відеозаписі з використанням відповідної слайдової презентації. Відео доступне за посиланням у додатку А, а матеріали презентації включено до додатку Б.
     У межах роботи було проаналізовано архітектуру великомасштабної програмної системи Reddit — однієї з найпопулярніших соціальних платформ сучасного Інтернету. Вона була розглянута як приклад складної розподіленої системи, яка успішно функціонує в умовах високих навантажень, великого обсягу динамічного контенту та широкої географічної аудиторії.
     Розгляд розпочався з короткого вступу про те, що таке Reddit, у чому полягає її специфіка як соціального ресурсу, і чому саме ця платформа становить інтерес для вивчення з архітектурної точки зору. Далі увагу було зосереджено на загальному описі її архітектури: систему було охарактеризовано як мікросервісну, що означає розподіл функціоналу між окремими, автономними сервісами, які взаємодіють через API-шлюзи. Це дозволяє масштабувати систему, уникати єдиних точок відмови та ефективно керувати її складністю.
     Окремим розділом було розкрито вимоги до архітектури Reddit, зокрема: необхідність високої масштабованості, низької затримки, доступності без простоїв, безпеки від атак, гнучкості до змін і стабільності під час пікового навантаження. Далі була висвітлена структура клієнтської частини системи. Було пояснено, що фронтенд побудовано на React з використанням Next.js, а мобільні додатки реалізовано на Swift (для iOS) та Kotlin (для Android). На серверній стороні функціонують десятки мікросервісів, більшість із яких написані на Python, а продуктивні сервіси реалізовано на Go та Rust. Сервіси взаємодіють через gRPC і GraphQL.
     У наступному етапі розглянуто ключові функції платформи — публікацію дописів, голосування, коментування, підписку на спільноти та формування персоналізованої стрічки новин. Було пояснено, як кожна з цих функцій реалізується технічно через мікросервіси, кеші та бази даних. Особливу увагу приділено організації зберігання даних: описано використання PostgreSQL як реляційної бази для основних структурованих даних, Cassandra — для масштабованих NoSQL-даних, Redis і Memcached — для кешування популярного вмісту та сесій.
     Далі було детально охарактеризовано аналітичну підсистему Reddit, побудовану на базі Apache Kafka, Apache Spark і ClickHouse. Платформа використовує ці інструменти для збору, обробки й аналізу телеметричних даних, тестування функцій і прийняття рішень на основі користувацької активності. Описано технологічний стек, у який входять Docker і Kubernetes для контейнеризації й оркестрації, Terraform для розгортання інфраструктури, Jenkins та GitHub Actions для CI/CD, а також Prometheus, Grafana й ELK Stack для моніторингу та логування.
     Окремо висвітлено тему масштабування та резервування: було розглянуто, як система автоматично масштабовується, використовує CDN, зберігає дані в кількох географічних регіонах і забезпечує відмовостійкість. Вказано на типові виклики, які виникають під час підтримки такої архітектури: обробка великого обсягу UGC-контенту, боротьба зі спамом, технічний борг, та потреба в постійній модернізації системи.
     У підсумковій частині роботи окреслено майбутні перспективи архітектури Reddit. Зокрема, наголошено на поступовому переході сервісів на мови Go і Rust, розширенні використання штучного інтелекту, впровадженні нових підходів до монетизації та розвитку аналітики.


ВИСНОВКИ

     У ході виконання практичного завдання було глибоко вивчено сучасну архітектуру однієї з наймасштабніших соціальних платформ світу, розкрито її внутрішню організацію та технологічну складову, що дозволило краще зрозуміти принципи побудови стійких, гнучких та масштабованих програмних систем.



ДОДАТОК А
Посилання на відеозапис доповіді та текст хронологічного опису доповіді

     Відеозапис доповіді на YouTube: https://youtu.be/lB8FvhORro8 

     Хронологічний опис доповіді:
00:00 – Привітання. Представлення себе та теми доповіді.
00:30 – Зміст. Короткий огляд структури доповіді.
01:05 – Вступ. Знайомство з Reddit як платформою та обґрунтування вибору теми.
01:41 – Загальний опис архітектури. Пояснення мікросервісної моделі Reddit та її принципів.
02:29 – Вимоги до архітектури. Основні технічні вимоги: масштабованість, стабільність, безпека.
03:13 – Фронтенд, бекенд та мобайл. Огляд клієнтських і серверних технологій, мобільних застосунків.
04:07 – Головні функції та як вони працюють. Розбір ключових можливостей платформи та їх реалізації.
04:51 – База даних та аналітика. Типи баз даних, кешування та системи аналітики.
05:37 – Технологічний стек. Список основних мов, інструментів і платформ.
06:17 – Масштабованість та резервування. Механізми розширення, захисту та відмовостійкості.
06:52 – Основні виклики. Типові проблеми архітектури: навантаження, бот-атаки, техборг.
07:21 – Перспективи. Напрями розвитку: AI, монетизація, оптимізація.
07:49 – Висновки. Підсумок: оцінка архітектури, її ефективність і потенціал. 

ДОДАТОК Б
Слайди презентації доповіді

 
Рисунок Б.1 – Титульний слайд

 
Рисунок Б.2 – Зміст презентації

 
Рисунок Б.3 – Вступ

 
Рисунок Б.4 – Загальний опис архітектури

 
Рисунок Б.5 – Вимоги до архітектури

 
Рисунок Б.6 – Фронтенд, бекенд та мобайл

 
Рисунок Б.7 – Головні функції та як вони працюють

 
Рисунок Б.8 – База даних та аналітика

 
Рисунок Б.9 – Технологічний стек

 
Рисунок Б.10 – Масштабованість та резервування

 
Рисунок Б.11 – Основні виклики

 
Рисунок Б.12 – Майбутні перспективи


Рисунок Б.13 – Висновки